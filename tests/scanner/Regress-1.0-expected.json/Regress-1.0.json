{
    "classes": [
        {
            "doc": "  <p>This is an object used to test annotations.</p>",
            "kind": "class",
            "name": "AnnotationObject"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FooBuffer"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FooObject"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FooOtherObject"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FooSubobject"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestFloating"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestFundamentalObject"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestFundamentalSubObject"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestInheritDrawable"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestObj"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestSubObj"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestWi8021x"
        }
    ],
    "enums": [
        {
            "doc": "",
            "kind": "enum",
            "name": "ATestError"
        },
        {
            "doc": "",
            "kind": "enum",
            "name": "FooASingle"
        },
        {
            "doc": "",
            "kind": "enum",
            "name": "FooAddressType"
        },
        {
            "doc": "",
            "kind": "enum",
            "name": "FooEnumFullname"
        },
        {
            "doc": "",
            "kind": "enum",
            "name": "FooEnumNoType"
        },
        {
            "doc": "",
            "kind": "enum",
            "name": "FooEnumType"
        },
        {
            "doc": "",
            "kind": "enum",
            "name": "FooError"
        },
        {
            "doc": "  <p>Some type that is only interesting from C and should not be\nexposed to language bindings.</p>",
            "kind": "enum",
            "name": "FooSkippable"
        },
        {
            "doc": "",
            "kind": "enum",
            "name": "FooStackLayer"
        },
        {
            "doc": "",
            "kind": "enum",
            "name": "TestABCError"
        },
        {
            "doc": "",
            "kind": "enum",
            "name": "TestDEFError"
        },
        {
            "doc": "  <p>By purpose, not all members have documentation</p>",
            "kind": "enum",
            "name": "TestEnum"
        },
        {
            "doc": "",
            "kind": "enum",
            "name": "TestEnumNoGEnum"
        },
        {
            "doc": "",
            "kind": "enum",
            "name": "TestEnumUnsigned"
        },
        {
            "doc": "",
            "kind": "enum",
            "name": "TestError"
        },
        {
            "doc": "",
            "kind": "enum",
            "name": "TestOtherError"
        },
        {
            "doc": "",
            "kind": "enum",
            "name": "TestReferenceEnum"
        }
    ],
    "functions": [
        {
            "doc": "",
            "kind": "function",
            "name": "aliased_caller_alloc"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "annotation_attribute_func"
        },
        {
            "doc": "  <p>Test messing up the heuristic of closure/destroy-notification\ndetection, and fixing it via annotations.</p>",
            "kind": "function",
            "name": "annotation_custom_destroy"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "annotation_get_source_file"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "annotation_init"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "annotation_invalid_regress_annotation"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "annotation_ptr_array"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "annotation_return_array"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "annotation_return_filename"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "annotation_set_source_file"
        },
        {
            "doc": "  <p>Explicitly test having a space after the ** here.</p>",
            "kind": "function",
            "name": "annotation_space_after_comment_bug631690"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "annotation_string_array_length"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "annotation_string_zero_terminated"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "annotation_string_zero_terminated_out"
        },
        {
            "doc": "  <p>See https://bugzilla.gnome.org/show_bug.cgi?id=630862</p>",
            "kind": "function",
            "name": "annotation_test_parsing_bug630862"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "annotation_transfer_floating"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "annotation_versioned"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "atest_error_quark"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "foo_async_ready_callback"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "foo_destroy_notify_callback"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "foo_enum_type_method"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "foo_enum_type_returnv"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "foo_error_quark"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "foo_init"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "foo_interface_static_method"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "foo_method_external_references"
        },
        {
            "doc": "  <p>This should be scanned as a top-level function, and shouldn't cause\na \"Can't find matching type for constructor\" warning.</p>",
            "kind": "function",
            "name": "foo_not_a_constructor_new"
        },
        {
            "doc": "  <p>This is a C convenience constructor; we have to (skip)\nit because it's not a boxed type.</p>",
            "kind": "function",
            "name": "foo_rectangle_new"
        },
        {
            "doc": "  <p>Does something that's only interesting from C and should not be\nexposed to language bindings.</p>",
            "kind": "function",
            "name": "foo_skip_me"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "foo_some_variant"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "foo_some_variant_ptr"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "foo_test_array"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "foo_test_const_char_param"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "foo_test_const_char_retval"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "foo_test_const_struct_param"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "foo_test_const_struct_retval"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "foo_test_string_array"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "foo_test_string_array_with_g"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "foo_test_unsigned_qualifier"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "foo_test_unsigned_type"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "foo_test_varargs_callback"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "foo_test_varargs_callback2"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "foo_test_varargs_callback3"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "func_obj_null_in"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "global_get_flags_out"
        },
        {
            "doc": "  <p>This test case mirrors GnomeKeyringPasswordSchema from\nlibgnome-keyring.</p>",
            "kind": "function",
            "name": "has_parameter_named_attrs"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "introspectable_via_alias"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "not_introspectable_via_alias"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "random_function_with_skipped_structure"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "set_abort_on_error"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_abc_error_quark"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_array_callback"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_array_fixed_out_objects"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_array_fixed_size_int_in"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_array_fixed_size_int_out"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_array_fixed_size_int_return"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_array_gint16_in"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_array_gint32_in"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_array_gint64_in"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_array_gint8_in"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_array_gtype_in"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_array_int_full_out"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_array_int_in"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_array_int_inout"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_array_int_none_out"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_array_int_null_in"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_array_int_null_out"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_array_int_out"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_async_ready_callback"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_boolean"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_boolean_false"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_boolean_true"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_boxeds_not_a_method"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_boxeds_not_a_static"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_cairo_context_full_return"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_cairo_context_none_in"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_cairo_surface_full_out"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_cairo_surface_full_return"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_cairo_surface_none_in"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_cairo_surface_none_return"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_callback"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_callback_async"
        },
        {
            "doc": "  <p>Notified - callback persists until a DestroyNotify delegate\nis invoked.</p>",
            "kind": "function",
            "name": "test_callback_destroy_notify"
        },
        {
            "doc": "  <p>Adds a scope notified callback with no user data. This can invoke an error\ncondition in bindings which needs to be tested.</p>",
            "kind": "function",
            "name": "test_callback_destroy_notify_no_user_data"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_callback_thaw_async"
        },
        {
            "doc": "  <p>Invokes all callbacks installed by #test_callback_destroy_notify(),\nadding up their return values, and removes them, invoking the\ncorresponding destroy notfications.</p>",
            "kind": "function",
            "name": "test_callback_thaw_notifications"
        },
        {
            "doc": "  <p>Call - callback parameter persists for the duration of the method\ncall and can be released on return.</p>",
            "kind": "function",
            "name": "test_callback_user_data"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_closure"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_closure_one_arg"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_closure_variant"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_date_in_gvalue"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_def_error_quark"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_double"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_enum_param"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_error_quark"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_filename_return"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_float"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_garray_container_return"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_garray_full_return"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_gerror_callback"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_ghash_container_return"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_ghash_everything_return"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_ghash_gvalue_in"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_ghash_gvalue_return"
        },
        {
            "doc": "  <p>Specify nested parameterized types directly with the (type ) annotation.</p>",
            "kind": "function",
            "name": "test_ghash_nested_everything_return"
        },
        {
            "doc": "  <p>Another way of specifying nested parameterized types: using the\nelement-type annotation.</p>",
            "kind": "function",
            "name": "test_ghash_nested_everything_return2"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_ghash_nothing_in"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_ghash_nothing_in2"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_ghash_nothing_return"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_ghash_nothing_return2"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_ghash_null_in"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_ghash_null_out"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_ghash_null_return"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_glist_container_return"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_glist_everything_return"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_glist_nothing_in"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_glist_nothing_in2"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_glist_nothing_return"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_glist_nothing_return2"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_glist_null_in"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_glist_null_out"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_gslist_container_return"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_gslist_everything_return"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_gslist_nothing_in"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_gslist_nothing_in2"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_gslist_nothing_return"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_gslist_nothing_return2"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_gslist_null_in"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_gslist_null_out"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_gtype"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_gvariant_as"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_gvariant_asv"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_gvariant_i"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_gvariant_s"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_gvariant_v"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_hash_table_callback"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_int"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_int16"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_int32"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_int64"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_int8"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_int_out_utf8"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_int_value_arg"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_long"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_multi_callback"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_multi_double_args"
        },
        {
            "doc": "  <p>This is a function.</p>  <p>It has multiple lines in the documentation.</p>  <p>The sky is blue.</p>  <p>You will give me your credit card number.</p>",
            "kind": "function",
            "name": "test_multiline_doc_comments"
        },
        {
            "doc": "  <p>&lt;informaltable&gt;\n  &lt;tgroup cols=\"3\"&gt;\n    &lt;thead&gt;\n      &lt;row&gt;\n        &lt;entry&gt;Syntax&lt;/entry&gt;\n        &lt;entry&gt;Explanation&lt;/entry&gt;\n        &lt;entry&gt;Examples&lt;/entry&gt;\n      &lt;/row&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n      &lt;row&gt;\n        &lt;entry&gt;rgb(@r, @g, @b)&lt;/entry&gt;\n        &lt;entry&gt;An opaque color; @r, @g, @b can be either integers between\n               0 and 255 or percentages&lt;/entry&gt;\n        &lt;entry&gt;&lt;literallayout&gt;rgb(128, 10, 54)\nrgb(20%, 30%, 0%)&lt;/literallayout&gt;&lt;/entry&gt;\n      &lt;/row&gt;\n      &lt;row&gt;\n        &lt;entry&gt;rgba(@r, @g, @b, <code>a</code>)&lt;/entry&gt;\n        &lt;entry&gt;A translucent color; @r, @g, @b are as in the previous row,\n               <code>a</code> is a floating point number between 0 and 1&lt;/entry&gt;\n        &lt;entry&gt;&lt;literallayout&gt;rgba(255, 255, 0, 0.5)&lt;/literallayout&gt;&lt;/entry&gt;\n      &lt;/row&gt;\n   &lt;/tbody&gt;\n &lt;/tgroup&gt;\n&lt;/informaltable&gt;</p>  <p>What we're testing here is that the scanner ignores the <code>a</code> nested inside XML.</p>",
            "kind": "function",
            "name": "test_nested_parameter"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_null_gerror_callback"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_owned_gerror_callback"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_short"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_simple_boxed_a_const_return"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_simple_callback"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_size"
        },
        {
            "doc": "  <p>Should not emit a warning:\nhttps://bugzilla.gnome.org/show_bug.cgi?id=685399</p>",
            "kind": "function",
            "name": "test_skip_unannotated_callback"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_ssize"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_struct_a_parse"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_strv_in"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_strv_in_gvalue"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_strv_out"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_strv_out_c"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_strv_out_container"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_strv_outarg"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_timet"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_torture_signature_0"
        },
        {
            "doc": "  <p>This function throws an error if m is odd.</p>",
            "kind": "function",
            "name": "test_torture_signature_1"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_torture_signature_2"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_uint"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_uint16"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_uint32"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_uint64"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_uint8"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_ulong"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_unconventional_error_quark"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_unichar"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_unsigned_enum_param"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_ushort"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_utf8_const_in"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_utf8_const_return"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_utf8_inout"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_utf8_nonconst_return"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_utf8_null_in"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_utf8_null_out"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_utf8_out"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_utf8_out_nonconst_return"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_utf8_out_out"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_value_get_fundamental_object"
        },
        {
            "doc": "  <p>This is a <em>test</em> of <strong>Markdown</strong> formatting within a comment.</p>",
            "kind": "function",
            "name": "test_value_return"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_value_set_fundamental_object"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "test_versioning"
        }
    ],
    "name": "Regress",
    "records": [
        {
            "doc": "",
            "kind": "class",
            "name": "AnAnonymousUnion"
        },
        {
            "doc": "  <p>This is a struct for testing field documentation and annotations</p>",
            "kind": "class",
            "name": "AnnotationFields"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "AnnotationObjectClass"
        },
        {
            "doc": "  <p>This is a test of an array of object in an field of a struct.</p>",
            "kind": "class",
            "name": "AnnotationStruct"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FooBRect"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FooBoxed"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FooBufferClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FooDBusData"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FooEventAny"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FooEventExpose"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FooForeignStruct"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FooInterfaceIface"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FooObjectClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FooOtherObjectClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FooRectangle"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FooStruct"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FooStructPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FooSubInterfaceIface"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FooSubobjectClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FooThingWithArray"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FooUtilityStruct"
        },
        {
            "doc": "  <p>Like telepathy-glib's TpIntset.</p>",
            "kind": "class",
            "name": "Intset"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "LikeGnomeKeyringPasswordSchema"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "LikeXklConfigItem"
        },
        {
            "doc": "  <p>This should be skipped, and moreover, all function which\nuse it should be.</p>",
            "kind": "class",
            "name": "SkippedStructure"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestBoxed"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestBoxedB"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestBoxedC"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestBoxedD"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestBoxedPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestFloatingClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestFundamentalObjectClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestFundamentalSubObjectClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestInheritDrawableClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestInheritPixmapObjectClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestInterfaceIface"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestObjClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestPrivateStruct"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestSimpleBoxedA"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestSimpleBoxedB"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestStructA"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestStructB"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestStructC"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestStructD"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestStructE"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestStructF"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestStructFixedArray"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestSubObjClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TestWi8021xClass"
        }
    ],
    "version": "1.0"
}