<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
<!ENTITY version SYSTEM "version.xml">
]>
<book xml:id="page_Regress"
      xmlns="http://docbook.org/ns/docbook"
      version="5.0">
  <title>Regress Documentation</title>
  <chapter xml:id="ch_RegressIntset">
    <refentry id="RegressIntset"/>
    <title>RegressIntset</title>
    <refsynopsisdiv id="RegressIntset.synopsis" role="synopsis">
      <title role="synopsis.title">Synopsis</title>
      <synopsis>
      </synopsis>
    </refsynopsisdiv>
  </chapter>
  <chapter xml:id="ch_RegressSkippedStructure">
    <refentry id="RegressSkippedStructure"/>
    <title>RegressSkippedStructure</title>
    <refsynopsisdiv id="RegressSkippedStructure.synopsis" role="synopsis">
      <title role="synopsis.title">Synopsis</title>
      <synopsis>
      </synopsis>
    </refsynopsisdiv>
  </chapter>
  <chapter xml:id="ch_RegressTestBoxed">
    <refentry id="RegressTestBoxed"/>
    <title>RegressTestBoxed</title>
    <refsynopsisdiv id="RegressTestBoxed.synopsis" role="synopsis">
      <title role="synopsis.title">Synopsis</title>
      <synopsis>
<link linkend="RegressTestBoxed"><returnvalue>RegressTestBoxed*</returnvalue></link>   <link linkend="copy-details">regress_test_boxed_copy</link>                 (<parameter><link linkend="RegressTestBoxed"><type>RegressTestBoxed*</type></link> testboxed</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="equals-details">regress_test_boxed_equals</link>               (<parameter><link linkend="RegressTestBoxed"><type>RegressTestBoxed*</type></link> testboxed, </parameter>
                                                             <parameter><link linkend="RegressTestBoxed"><type>RegressTestBoxed*</type></link> other</parameter>);
      </synopsis>
    </refsynopsisdiv>
    <refsect1 id="RegressTestBoxed-details" role="details">
      <title role="details.title">Details</title>
      <refsect2 id="regress_test_boxed_copy" role="struct">
        <title>regress_test_boxed_copy ()</title>
        <indexterm zone="copy">
          <primary>copy</primary>
        </indexterm>
        <programlisting>
<link linkend="RegressTestBoxed"><returnvalue>RegressTestBoxed*</returnvalue></link>   regress_test_boxed_copy                 (<parameter><link linkend="RegressTestBoxed"><type>RegressTestBoxed*</type></link> testboxed</parameter>);
        </programlisting>
        <para/>
      </refsect2>
      <refsect2 id="regress_test_boxed_equals" role="struct">
        <title>regress_test_boxed_equals ()</title>
        <indexterm zone="equals">
          <primary>equals</primary>
        </indexterm>
        <programlisting>
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            regress_test_boxed_equals               (<parameter><link linkend="RegressTestBoxed"><type>RegressTestBoxed*</type></link> testboxed, </parameter>
                                                             <parameter><link linkend="RegressTestBoxed"><type>RegressTestBoxed*</type></link> other</parameter>);
        </programlisting>
        <para/>
      </refsect2>
    </refsect1>
  </chapter>
  <chapter xml:id="ch_RegressTestBoxedPrivate">
    <refentry id="RegressTestBoxedPrivate"/>
    <title>RegressTestBoxedPrivate</title>
    <refsynopsisdiv id="RegressTestBoxedPrivate.synopsis" role="synopsis">
      <title role="synopsis.title">Synopsis</title>
      <synopsis>
      </synopsis>
    </refsynopsisdiv>
  </chapter>
  <chapter xml:id="ch_RegressTestFloating">
    <refentry id="RegressTestFloating"/>
    <title>RegressTestFloating</title>
    <refsynopsisdiv id="RegressTestFloating.synopsis" role="synopsis">
      <title role="synopsis.title">Synopsis</title>
      <synopsis>
      </synopsis>
    </refsynopsisdiv>
    <refsect1 id="RegressTestFloating.object-hierarchy"
              role="object_hierarchy">
      <title role="object_hierarchy.title">Object Hierarchy</title>
      <synopsis>
  GObject
   +----GInitiallyUnowned
         +----RegressTestFloating      </synopsis>
    </refsect1>
  </chapter>
  <chapter xml:id="ch_RegressTestFloatingClass">
    <refentry id="RegressTestFloatingClass"/>
    <title>RegressTestFloatingClass</title>
    <refsynopsisdiv id="RegressTestFloatingClass.synopsis" role="synopsis">
      <title role="synopsis.title">Synopsis</title>
      <synopsis>
      </synopsis>
    </refsynopsisdiv>
  </chapter>
  <chapter xml:id="ch_RegressTestFundamentalObject">
    <refentry id="RegressTestFundamentalObject"/>
    <title>RegressTestFundamentalObject</title>
    <refsynopsisdiv id="RegressTestFundamentalObject.synopsis" role="synopsis">
      <title role="synopsis.title">Synopsis</title>
      <synopsis>
<link linkend="RegressTestFundamentalObject"><returnvalue>RegressTestFundamentalObject*</returnvalue></link><link linkend="ref-details">regress_test_fundamental_object_ref</link>     (<parameter><link linkend="RegressTestFundamentalObject"><type>RegressTestFundamentalObject*</type></link> testfundamentalobject</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="unref-details">regress_test_fundamental_object_unref</link>   (<parameter><link linkend="RegressTestFundamentalObject"><type>RegressTestFundamentalObject*</type></link> testfundamentalobject</parameter>);
      </synopsis>
    </refsynopsisdiv>
    <refsect1 id="RegressTestFundamentalObject.object-hierarchy"
              role="object_hierarchy">
      <title role="object_hierarchy.title">Object Hierarchy</title>
      <synopsis>
  RegressTestFundamentalObject      </synopsis>
    </refsect1>
    <refsect1 id="RegressTestFundamentalObject-details" role="details">
      <title role="details.title">Details</title>
      <refsect2 id="regress_test_fundamental_object_ref" role="struct">
        <title>regress_test_fundamental_object_ref ()</title>
        <indexterm zone="ref">
          <primary>ref</primary>
        </indexterm>
        <programlisting>
<link linkend="RegressTestFundamentalObject"><returnvalue>RegressTestFundamentalObject*</returnvalue></link>regress_test_fundamental_object_ref     (<parameter><link linkend="RegressTestFundamentalObject"><type>RegressTestFundamentalObject*</type></link> testfundamentalobject</parameter>);
        </programlisting>
        <para/>
      </refsect2>
      <refsect2 id="regress_test_fundamental_object_unref" role="struct">
        <title>regress_test_fundamental_object_unref ()</title>
        <indexterm zone="unref">
          <primary>unref</primary>
        </indexterm>
        <programlisting>
<link linkend="void"><returnvalue>void</returnvalue></link>                regress_test_fundamental_object_unref   (<parameter><link linkend="RegressTestFundamentalObject"><type>RegressTestFundamentalObject*</type></link> testfundamentalobject</parameter>);
        </programlisting>
        <para/>
      </refsect2>
    </refsect1>
  </chapter>
  <chapter xml:id="ch_RegressTestFundamentalObjectClass">
    <refentry id="RegressTestFundamentalObjectClass"/>
    <title>RegressTestFundamentalObjectClass</title>
    <refsynopsisdiv id="RegressTestFundamentalObjectClass.synopsis"
                    role="synopsis">
      <title role="synopsis.title">Synopsis</title>
      <synopsis>
      </synopsis>
    </refsynopsisdiv>
  </chapter>
  <chapter xml:id="ch_RegressTestFundamentalSubObject">
    <refentry id="RegressTestFundamentalSubObject"/>
    <title>RegressTestFundamentalSubObject</title>
    <refsynopsisdiv id="RegressTestFundamentalSubObject.synopsis"
                    role="synopsis">
      <title role="synopsis.title">Synopsis</title>
      <synopsis>
      </synopsis>
    </refsynopsisdiv>
    <refsect1 id="RegressTestFundamentalSubObject.object-hierarchy"
              role="object_hierarchy">
      <title role="object_hierarchy.title">Object Hierarchy</title>
      <synopsis>
  RegressTestFundamentalObject
   +----RegressTestFundamentalSubObject      </synopsis>
    </refsect1>
  </chapter>
  <chapter xml:id="ch_RegressTestFundamentalSubObjectClass">
    <refentry id="RegressTestFundamentalSubObjectClass"/>
    <title>RegressTestFundamentalSubObjectClass</title>
    <refsynopsisdiv id="RegressTestFundamentalSubObjectClass.synopsis"
                    role="synopsis">
      <title role="synopsis.title">Synopsis</title>
      <synopsis>
      </synopsis>
    </refsynopsisdiv>
  </chapter>
  <chapter xml:id="ch_RegressTestInterface">
    <refentry id="RegressTestInterface"/>
    <title>RegressTestInterface</title>
    <refsynopsisdiv id="RegressTestInterface.synopsis" role="synopsis">
      <title role="synopsis.title">Synopsis</title>
      <synopsis>
      </synopsis>
    </refsynopsisdiv>
    <refsect1 id="RegressTestInterface.object-hierarchy"
              role="object_hierarchy">
      <title role="object_hierarchy.title">Object Hierarchy</title>
      <synopsis>
  RegressTestInterface      </synopsis>
    </refsect1>
  </chapter>
  <chapter xml:id="ch_RegressTestInterfaceIface">
    <refentry id="RegressTestInterfaceIface"/>
    <title>RegressTestInterfaceIface</title>
    <refsynopsisdiv id="RegressTestInterfaceIface.synopsis" role="synopsis">
      <title role="synopsis.title">Synopsis</title>
      <synopsis>
      </synopsis>
    </refsynopsisdiv>
  </chapter>
  <chapter xml:id="ch_RegressTestObj">
    <refentry id="RegressTestObj"/>
    <title>RegressTestObj</title>
    <refsynopsisdiv id="RegressTestObj.synopsis" role="synopsis">
      <title role="synopsis.title">Synopsis</title>
      <synopsis>
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="do_matrix-details">regress_test_obj_do_matrix</link>              (<parameter><link linkend="RegressTestObj"><type>RegressTestObj*</type></link> testobj, </parameter>
                                                             <parameter><link linkend="char"><type>char*</type></link> somestr</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="forced_method-details">regress_forced_method</link>                   (<parameter><link linkend="RegressTestObj"><type>RegressTestObj*</type></link> testobj</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="instance_method-details">regress_test_obj_instance_method</link>        (<parameter><link linkend="RegressTestObj"><type>RegressTestObj*</type></link> testobj</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="instance_method_callback-details">regress_test_obj_instance_method_callback</link>(<parameter><link linkend="RegressTestObj"><type>RegressTestObj*</type></link> testobj, </parameter>
                                                             <parameter><link linkend="RegressTestCallback"><type>RegressTestCallback</type></link> callback</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="set_bare-details">regress_test_obj_set_bare</link>               (<parameter><link linkend="RegressTestObj"><type>RegressTestObj*</type></link> testobj, </parameter>
                                                             <parameter><link linkend="GObject"><type>GObject*</type></link> bare</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="skip_inout_param-details">regress_test_obj_skip_inout_param</link>       (<parameter><link linkend="RegressTestObj"><type>RegressTestObj*</type></link> testobj, </parameter>
                                                             <parameter><link linkend="gint"><type>gint</type></link> a, </parameter>
                                                             <parameter><link linkend="gint"><type>gint*</type></link> out_b, </parameter>
                                                             <parameter><link linkend="gdouble"><type>gdouble</type></link> c, </parameter>
                                                             <parameter><link linkend="gint"><type>gint*</type></link> inout_d, </parameter>
                                                             <parameter><link linkend="gint"><type>gint*</type></link> out_sum, </parameter>
                                                             <parameter><link linkend="gint"><type>gint</type></link> num1, </parameter>
                                                             <parameter><link linkend="gint"><type>gint</type></link> num2</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="skip_out_param-details">regress_test_obj_skip_out_param</link>         (<parameter><link linkend="RegressTestObj"><type>RegressTestObj*</type></link> testobj, </parameter>
                                                             <parameter><link linkend="gint"><type>gint</type></link> a, </parameter>
                                                             <parameter><link linkend="gint"><type>gint*</type></link> out_b, </parameter>
                                                             <parameter><link linkend="gdouble"><type>gdouble</type></link> c, </parameter>
                                                             <parameter><link linkend="gint"><type>gint*</type></link> inout_d, </parameter>
                                                             <parameter><link linkend="gint"><type>gint*</type></link> out_sum, </parameter>
                                                             <parameter><link linkend="gint"><type>gint</type></link> num1, </parameter>
                                                             <parameter><link linkend="gint"><type>gint</type></link> num2</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="skip_param-details">regress_test_obj_skip_param</link>             (<parameter><link linkend="RegressTestObj"><type>RegressTestObj*</type></link> testobj, </parameter>
                                                             <parameter><link linkend="gint"><type>gint</type></link> a, </parameter>
                                                             <parameter><link linkend="gint"><type>gint*</type></link> out_b, </parameter>
                                                             <parameter><link linkend="gdouble"><type>gdouble</type></link> c, </parameter>
                                                             <parameter><link linkend="gint"><type>gint*</type></link> inout_d, </parameter>
                                                             <parameter><link linkend="gint"><type>gint*</type></link> out_sum, </parameter>
                                                             <parameter><link linkend="gint"><type>gint</type></link> num1, </parameter>
                                                             <parameter><link linkend="gint"><type>gint</type></link> num2</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="skip_return_val-details">regress_test_obj_skip_return_val</link>        (<parameter><link linkend="RegressTestObj"><type>RegressTestObj*</type></link> testobj, </parameter>
                                                             <parameter><link linkend="gint"><type>gint</type></link> a, </parameter>
                                                             <parameter><link linkend="gint"><type>gint*</type></link> out_b, </parameter>
                                                             <parameter><link linkend="gdouble"><type>gdouble</type></link> c, </parameter>
                                                             <parameter><link linkend="gint"><type>gint*</type></link> inout_d, </parameter>
                                                             <parameter><link linkend="gint"><type>gint*</type></link> out_sum, </parameter>
                                                             <parameter><link linkend="gint"><type>gint</type></link> num1, </parameter>
                                                             <parameter><link linkend="gint"><type>gint</type></link> num2</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="torture_signature_0-details">regress_test_obj_torture_signature_0</link>    (<parameter><link linkend="RegressTestObj"><type>RegressTestObj*</type></link> testobj, </parameter>
                                                             <parameter><link linkend="int"><type>int</type></link> x, </parameter>
                                                             <parameter><link linkend="double"><type>double*</type></link> y, </parameter>
                                                             <parameter><link linkend="int"><type>int*</type></link> z, </parameter>
                                                             <parameter><link linkend="char"><type>char*</type></link> foo, </parameter>
                                                             <parameter><link linkend="int"><type>int*</type></link> q, </parameter>
                                                             <parameter><link linkend="guint"><type>guint</type></link> m</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="torture_signature_1-details">regress_test_obj_torture_signature_1</link>    (<parameter><link linkend="RegressTestObj"><type>RegressTestObj*</type></link> testobj, </parameter>
                                                             <parameter><link linkend="int"><type>int</type></link> x, </parameter>
                                                             <parameter><link linkend="double"><type>double*</type></link> y, </parameter>
                                                             <parameter><link linkend="int"><type>int*</type></link> z, </parameter>
                                                             <parameter><link linkend="char"><type>char*</type></link> foo, </parameter>
                                                             <parameter><link linkend="int"><type>int*</type></link> q, </parameter>
                                                             <parameter><link linkend="guint"><type>guint</type></link> m</parameter>);
      </synopsis>
    </refsynopsisdiv>
    <refsect1 id="RegressTestObj.object-hierarchy" role="object_hierarchy">
      <title role="object_hierarchy.title">Object Hierarchy</title>
      <synopsis>
  GObject
   +----RegressTestObj      </synopsis>
    </refsect1>
    <refsect1 id="RegressTestObj.properties" role="properties">
      <title role="properties.title">Properties</title>
      <synopsis>
  "bare"                     GObject.Object        : Read / Write
  "boxed"                    Regress.TestBoxed     : Read / Write
  "double"                   gdouble               : Read / Write
  "float"                    gfloat                : Read / Write
  "hash-table"               GHashTable&lt;utf8, gint8&gt;: Read / Write
  "int"                      gint                  : Read / Write
  "list"                     GList&lt;utf8&gt;     : Read / Write
  "string"                   utf8                  : Read / Write
      </synopsis>
    </refsect1>
    <refsect1 id="RegressTestObj.signals" role="signal_proto">
      <title role="signal_proto.title">Signals</title>
      <synopsis>
  "sig-with-array-prop"                            : TODO: signal flags not in GIR currently
  "sig-with-hash-prop"                             : TODO: signal flags not in GIR currently
  "sig-with-strv"                                  : TODO: signal flags not in GIR currently
  "test"                                           : TODO: signal flags not in GIR currently
  "test-with-static-scope-arg"                      : TODO: signal flags not in GIR currently
      </synopsis>
    </refsect1>
    <refsect1 id="RegressTestObj-details" role="details">
      <title role="details.title">Details</title>
      <refsect2 id="regress_test_obj_do_matrix" role="struct">
        <title>regress_test_obj_do_matrix ()</title>
        <indexterm zone="do_matrix">
          <primary>do_matrix</primary>
        </indexterm>
        <programlisting>
<link linkend="int"><returnvalue>int</returnvalue></link>                 regress_test_obj_do_matrix              (<parameter><link linkend="RegressTestObj"><type>RegressTestObj*</type></link> testobj, </parameter>
                                                             <parameter><link linkend="char"><type>char*</type></link> somestr</parameter>);
        </programlisting>
        <para>This method is virtual.  Notably its name differs from the virtual
slot name, which makes it useful for testing bindings handle this
case.</para>
      </refsect2>
      <refsect2 id="regress_forced_method" role="struct">
        <title>regress_forced_method ()</title>
        <indexterm zone="forced_method">
          <primary>forced_method</primary>
        </indexterm>
        <programlisting>
<link linkend="void"><returnvalue>void</returnvalue></link>                regress_forced_method                   (<parameter><link linkend="RegressTestObj"><type>RegressTestObj*</type></link> testobj</parameter>);
        </programlisting>
        <para/>
      </refsect2>
      <refsect2 id="regress_test_obj_instance_method" role="struct">
        <title>regress_test_obj_instance_method ()</title>
        <indexterm zone="instance_method">
          <primary>instance_method</primary>
        </indexterm>
        <programlisting>
<link linkend="int"><returnvalue>int</returnvalue></link>                 regress_test_obj_instance_method        (<parameter><link linkend="RegressTestObj"><type>RegressTestObj*</type></link> testobj</parameter>);
        </programlisting>
        <para/>
      </refsect2>
      <refsect2 id="regress_test_obj_instance_method_callback" role="struct">
        <title>regress_test_obj_instance_method_callback ()</title>
        <indexterm zone="instance_method_callback">
          <primary>instance_method_callback</primary>
        </indexterm>
        <programlisting>
<link linkend="void"><returnvalue>void</returnvalue></link>                regress_test_obj_instance_method_callback(<parameter><link linkend="RegressTestObj"><type>RegressTestObj*</type></link> testobj, </parameter>
                                                             <parameter><link linkend="RegressTestCallback"><type>RegressTestCallback</type></link> callback</parameter>);
        </programlisting>
        <para/>
      </refsect2>
      <refsect2 id="regress_test_obj_set_bare" role="struct">
        <title>regress_test_obj_set_bare ()</title>
        <indexterm zone="set_bare">
          <primary>set_bare</primary>
        </indexterm>
        <programlisting>
<link linkend="void"><returnvalue>void</returnvalue></link>                regress_test_obj_set_bare               (<parameter><link linkend="RegressTestObj"><type>RegressTestObj*</type></link> testobj, </parameter>
                                                             <parameter><link linkend="GObject"><type>GObject*</type></link> bare</parameter>);
        </programlisting>
        <para/>
      </refsect2>
      <refsect2 id="regress_test_obj_skip_inout_param" role="struct">
        <title>regress_test_obj_skip_inout_param ()</title>
        <indexterm zone="skip_inout_param">
          <primary>skip_inout_param</primary>
        </indexterm>
        <programlisting>
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            regress_test_obj_skip_inout_param       (<parameter><link linkend="RegressTestObj"><type>RegressTestObj*</type></link> testobj, </parameter>
                                                             <parameter><link linkend="gint"><type>gint</type></link> a, </parameter>
                                                             <parameter><link linkend="gint"><type>gint*</type></link> out_b, </parameter>
                                                             <parameter><link linkend="gdouble"><type>gdouble</type></link> c, </parameter>
                                                             <parameter><link linkend="gint"><type>gint*</type></link> inout_d, </parameter>
                                                             <parameter><link linkend="gint"><type>gint*</type></link> out_sum, </parameter>
                                                             <parameter><link linkend="gint"><type>gint</type></link> num1, </parameter>
                                                             <parameter><link linkend="gint"><type>gint</type></link> num2</parameter>);
        </programlisting>
        <para>Check that the out value is skipped</para>
      </refsect2>
      <refsect2 id="regress_test_obj_skip_out_param" role="struct">
        <title>regress_test_obj_skip_out_param ()</title>
        <indexterm zone="skip_out_param">
          <primary>skip_out_param</primary>
        </indexterm>
        <programlisting>
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            regress_test_obj_skip_out_param         (<parameter><link linkend="RegressTestObj"><type>RegressTestObj*</type></link> testobj, </parameter>
                                                             <parameter><link linkend="gint"><type>gint</type></link> a, </parameter>
                                                             <parameter><link linkend="gint"><type>gint*</type></link> out_b, </parameter>
                                                             <parameter><link linkend="gdouble"><type>gdouble</type></link> c, </parameter>
                                                             <parameter><link linkend="gint"><type>gint*</type></link> inout_d, </parameter>
                                                             <parameter><link linkend="gint"><type>gint*</type></link> out_sum, </parameter>
                                                             <parameter><link linkend="gint"><type>gint</type></link> num1, </parameter>
                                                             <parameter><link linkend="gint"><type>gint</type></link> num2</parameter>);
        </programlisting>
        <para>Check that the out value is skipped</para>
      </refsect2>
      <refsect2 id="regress_test_obj_skip_param" role="struct">
        <title>regress_test_obj_skip_param ()</title>
        <indexterm zone="skip_param">
          <primary>skip_param</primary>
        </indexterm>
        <programlisting>
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            regress_test_obj_skip_param             (<parameter><link linkend="RegressTestObj"><type>RegressTestObj*</type></link> testobj, </parameter>
                                                             <parameter><link linkend="gint"><type>gint</type></link> a, </parameter>
                                                             <parameter><link linkend="gint"><type>gint*</type></link> out_b, </parameter>
                                                             <parameter><link linkend="gdouble"><type>gdouble</type></link> c, </parameter>
                                                             <parameter><link linkend="gint"><type>gint*</type></link> inout_d, </parameter>
                                                             <parameter><link linkend="gint"><type>gint*</type></link> out_sum, </parameter>
                                                             <parameter><link linkend="gint"><type>gint</type></link> num1, </parameter>
                                                             <parameter><link linkend="gint"><type>gint</type></link> num2</parameter>);
        </programlisting>
        <para>Check that a parameter is skipped</para>
      </refsect2>
      <refsect2 id="regress_test_obj_skip_return_val" role="struct">
        <title>regress_test_obj_skip_return_val ()</title>
        <indexterm zone="skip_return_val">
          <primary>skip_return_val</primary>
        </indexterm>
        <programlisting>
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            regress_test_obj_skip_return_val        (<parameter><link linkend="RegressTestObj"><type>RegressTestObj*</type></link> testobj, </parameter>
                                                             <parameter><link linkend="gint"><type>gint</type></link> a, </parameter>
                                                             <parameter><link linkend="gint"><type>gint*</type></link> out_b, </parameter>
                                                             <parameter><link linkend="gdouble"><type>gdouble</type></link> c, </parameter>
                                                             <parameter><link linkend="gint"><type>gint*</type></link> inout_d, </parameter>
                                                             <parameter><link linkend="gint"><type>gint*</type></link> out_sum, </parameter>
                                                             <parameter><link linkend="gint"><type>gint</type></link> num1, </parameter>
                                                             <parameter><link linkend="gint"><type>gint</type></link> num2</parameter>);
        </programlisting>
        <para>Check that the return value is skipped</para>
      </refsect2>
      <refsect2 id="regress_test_obj_torture_signature_0" role="struct">
        <title>regress_test_obj_torture_signature_0 ()</title>
        <indexterm zone="torture_signature_0">
          <primary>torture_signature_0</primary>
        </indexterm>
        <programlisting>
<link linkend="void"><returnvalue>void</returnvalue></link>                regress_test_obj_torture_signature_0    (<parameter><link linkend="RegressTestObj"><type>RegressTestObj*</type></link> testobj, </parameter>
                                                             <parameter><link linkend="int"><type>int</type></link> x, </parameter>
                                                             <parameter><link linkend="double"><type>double*</type></link> y, </parameter>
                                                             <parameter><link linkend="int"><type>int*</type></link> z, </parameter>
                                                             <parameter><link linkend="char"><type>char*</type></link> foo, </parameter>
                                                             <parameter><link linkend="int"><type>int*</type></link> q, </parameter>
                                                             <parameter><link linkend="guint"><type>guint</type></link> m</parameter>);
        </programlisting>
        <para/>
      </refsect2>
      <refsect2 id="regress_test_obj_torture_signature_1" role="struct">
        <title>regress_test_obj_torture_signature_1 ()</title>
        <indexterm zone="torture_signature_1">
          <primary>torture_signature_1</primary>
        </indexterm>
        <programlisting>
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            regress_test_obj_torture_signature_1    (<parameter><link linkend="RegressTestObj"><type>RegressTestObj*</type></link> testobj, </parameter>
                                                             <parameter><link linkend="int"><type>int</type></link> x, </parameter>
                                                             <parameter><link linkend="double"><type>double*</type></link> y, </parameter>
                                                             <parameter><link linkend="int"><type>int*</type></link> z, </parameter>
                                                             <parameter><link linkend="char"><type>char*</type></link> foo, </parameter>
                                                             <parameter><link linkend="int"><type>int*</type></link> q, </parameter>
                                                             <parameter><link linkend="guint"><type>guint</type></link> m</parameter>);
        </programlisting>
        <para>This function throws an error if m is odd.</para>
      </refsect2>
    </refsect1>
    <refsect1 id="RegressTestObj.property-details" role="property_details">
      <title role="property_details.title">Property Details</title>
      Not implemented yet
      Not implemented yet
      Not implemented yet
      Not implemented yet
      Not implemented yet
      Not implemented yet
      Not implemented yet
      Not implemented yet
    </refsect1>
    <refsect1 id="RegressTestObj.signal-details" role="signals">
      <title role="signal.title">Signal Details</title>
      Not implemented yet
      Not implemented yet
      Not implemented yet
      Not implemented yet
      Not implemented yet
    </refsect1>
  </chapter>
  <chapter xml:id="ch_RegressTestObjClass">
    <refentry id="RegressTestObjClass"/>
    <title>RegressTestObjClass</title>
    <refsynopsisdiv id="RegressTestObjClass.synopsis" role="synopsis">
      <title role="synopsis.title">Synopsis</title>
      <synopsis>
      </synopsis>
    </refsynopsisdiv>
  </chapter>
  <chapter xml:id="ch_RegressTestPrivateStruct">
    <refentry id="RegressTestPrivateStruct"/>
    <title>RegressTestPrivateStruct</title>
    <refsynopsisdiv id="RegressTestPrivateStruct.synopsis" role="synopsis">
      <title role="synopsis.title">Synopsis</title>
      <synopsis>
      </synopsis>
    </refsynopsisdiv>
  </chapter>
  <chapter xml:id="ch_RegressTestSimpleBoxedA">
    <refentry id="RegressTestSimpleBoxedA"/>
    <title>RegressTestSimpleBoxedA</title>
    <refsynopsisdiv id="RegressTestSimpleBoxedA.synopsis" role="synopsis">
      <title role="synopsis.title">Synopsis</title>
      <synopsis>
<link linkend="RegressTestSimpleBoxedA"><returnvalue>RegressTestSimpleBoxedA*</returnvalue></link><link linkend="copy-details">regress_test_simple_boxed_a_copy</link>        (<parameter><link linkend="RegressTestSimpleBoxedA"><type>RegressTestSimpleBoxedA*</type></link> testsimpleboxeda</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="equals-details">regress_test_simple_boxed_a_equals</link>      (<parameter><link linkend="RegressTestSimpleBoxedA"><type>RegressTestSimpleBoxedA*</type></link> testsimpleboxeda, </parameter>
                                                             <parameter><link linkend="RegressTestSimpleBoxedA"><type>RegressTestSimpleBoxedA*</type></link> other_a</parameter>);
      </synopsis>
    </refsynopsisdiv>
    <refsect1 id="RegressTestSimpleBoxedA-details" role="details">
      <title role="details.title">Details</title>
      <refsect2 id="regress_test_simple_boxed_a_copy" role="struct">
        <title>regress_test_simple_boxed_a_copy ()</title>
        <indexterm zone="copy">
          <primary>copy</primary>
        </indexterm>
        <programlisting>
<link linkend="RegressTestSimpleBoxedA"><returnvalue>RegressTestSimpleBoxedA*</returnvalue></link>regress_test_simple_boxed_a_copy        (<parameter><link linkend="RegressTestSimpleBoxedA"><type>RegressTestSimpleBoxedA*</type></link> testsimpleboxeda</parameter>);
        </programlisting>
        <para/>
      </refsect2>
      <refsect2 id="regress_test_simple_boxed_a_equals" role="struct">
        <title>regress_test_simple_boxed_a_equals ()</title>
        <indexterm zone="equals">
          <primary>equals</primary>
        </indexterm>
        <programlisting>
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            regress_test_simple_boxed_a_equals      (<parameter><link linkend="RegressTestSimpleBoxedA"><type>RegressTestSimpleBoxedA*</type></link> testsimpleboxeda, </parameter>
                                                             <parameter><link linkend="RegressTestSimpleBoxedA"><type>RegressTestSimpleBoxedA*</type></link> other_a</parameter>);
        </programlisting>
        <para/>
      </refsect2>
    </refsect1>
  </chapter>
  <chapter xml:id="ch_RegressTestSimpleBoxedB">
    <refentry id="RegressTestSimpleBoxedB"/>
    <title>RegressTestSimpleBoxedB</title>
    <refsynopsisdiv id="RegressTestSimpleBoxedB.synopsis" role="synopsis">
      <title role="synopsis.title">Synopsis</title>
      <synopsis>
<link linkend="RegressTestSimpleBoxedB"><returnvalue>RegressTestSimpleBoxedB*</returnvalue></link><link linkend="copy-details">regress_test_simple_boxed_b_copy</link>        (<parameter><link linkend="RegressTestSimpleBoxedB"><type>RegressTestSimpleBoxedB*</type></link> testsimpleboxedb</parameter>);
      </synopsis>
    </refsynopsisdiv>
    <refsect1 id="RegressTestSimpleBoxedB-details" role="details">
      <title role="details.title">Details</title>
      <refsect2 id="regress_test_simple_boxed_b_copy" role="struct">
        <title>regress_test_simple_boxed_b_copy ()</title>
        <indexterm zone="copy">
          <primary>copy</primary>
        </indexterm>
        <programlisting>
<link linkend="RegressTestSimpleBoxedB"><returnvalue>RegressTestSimpleBoxedB*</returnvalue></link>regress_test_simple_boxed_b_copy        (<parameter><link linkend="RegressTestSimpleBoxedB"><type>RegressTestSimpleBoxedB*</type></link> testsimpleboxedb</parameter>);
        </programlisting>
        <para/>
      </refsect2>
    </refsect1>
  </chapter>
  <chapter xml:id="ch_RegressTestStructA">
    <refentry id="RegressTestStructA"/>
    <title>RegressTestStructA</title>
    <refsynopsisdiv id="RegressTestStructA.synopsis" role="synopsis">
      <title role="synopsis.title">Synopsis</title>
      <synopsis>
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="clone-details">regress_test_struct_a_clone</link>             (<parameter><link linkend="RegressTestStructA"><type>RegressTestStructA*</type></link> teststructa, </parameter>
                                                             <parameter><link linkend="RegressTestStructA"><type>RegressTestStructA*</type></link> a_out</parameter>);
      </synopsis>
    </refsynopsisdiv>
    <refsect1 id="RegressTestStructA-details" role="details">
      <title role="details.title">Details</title>
      <refsect2 id="regress_test_struct_a_clone" role="struct">
        <title>regress_test_struct_a_clone ()</title>
        <indexterm zone="clone">
          <primary>clone</primary>
        </indexterm>
        <programlisting>
<link linkend="void"><returnvalue>void</returnvalue></link>                regress_test_struct_a_clone             (<parameter><link linkend="RegressTestStructA"><type>RegressTestStructA*</type></link> teststructa, </parameter>
                                                             <parameter><link linkend="RegressTestStructA"><type>RegressTestStructA*</type></link> a_out</parameter>);
        </programlisting>
        <para>Make a copy of a RegressTestStructA</para>
      </refsect2>
    </refsect1>
  </chapter>
  <chapter xml:id="ch_RegressTestStructB">
    <refentry id="RegressTestStructB"/>
    <title>RegressTestStructB</title>
    <refsynopsisdiv id="RegressTestStructB.synopsis" role="synopsis">
      <title role="synopsis.title">Synopsis</title>
      <synopsis>
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="clone-details">regress_test_struct_b_clone</link>             (<parameter><link linkend="RegressTestStructB"><type>RegressTestStructB*</type></link> teststructb, </parameter>
                                                             <parameter><link linkend="RegressTestStructB"><type>RegressTestStructB*</type></link> b_out</parameter>);
      </synopsis>
    </refsynopsisdiv>
    <refsect1 id="RegressTestStructB-details" role="details">
      <title role="details.title">Details</title>
      <refsect2 id="regress_test_struct_b_clone" role="struct">
        <title>regress_test_struct_b_clone ()</title>
        <indexterm zone="clone">
          <primary>clone</primary>
        </indexterm>
        <programlisting>
<link linkend="void"><returnvalue>void</returnvalue></link>                regress_test_struct_b_clone             (<parameter><link linkend="RegressTestStructB"><type>RegressTestStructB*</type></link> teststructb, </parameter>
                                                             <parameter><link linkend="RegressTestStructB"><type>RegressTestStructB*</type></link> b_out</parameter>);
        </programlisting>
        <para>Make a copy of a RegressTestStructB</para>
      </refsect2>
    </refsect1>
  </chapter>
  <chapter xml:id="ch_RegressTestStructC">
    <refentry id="RegressTestStructC"/>
    <title>RegressTestStructC</title>
    <refsynopsisdiv id="RegressTestStructC.synopsis" role="synopsis">
      <title role="synopsis.title">Synopsis</title>
      <synopsis>
      </synopsis>
    </refsynopsisdiv>
  </chapter>
  <chapter xml:id="ch_RegressTestStructD">
    <refentry id="RegressTestStructD"/>
    <title>RegressTestStructD</title>
    <refsynopsisdiv id="RegressTestStructD.synopsis" role="synopsis">
      <title role="synopsis.title">Synopsis</title>
      <synopsis>
      </synopsis>
    </refsynopsisdiv>
  </chapter>
  <chapter xml:id="ch_RegressTestStructFixedArray">
    <refentry id="RegressTestStructFixedArray"/>
    <title>RegressTestStructFixedArray</title>
    <refsynopsisdiv id="RegressTestStructFixedArray.synopsis" role="synopsis">
      <title role="synopsis.title">Synopsis</title>
      <synopsis>
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="frob-details">regress_test_struct_fixed_array_frob</link>    (<parameter><link linkend="RegressTestStructFixedArray"><type>RegressTestStructFixedArray*</type></link> teststructfixedarray</parameter>);
      </synopsis>
    </refsynopsisdiv>
    <refsect1 id="RegressTestStructFixedArray-details" role="details">
      <title role="details.title">Details</title>
      <refsect2 id="regress_test_struct_fixed_array_frob" role="struct">
        <title>regress_test_struct_fixed_array_frob ()</title>
        <indexterm zone="frob">
          <primary>frob</primary>
        </indexterm>
        <programlisting>
<link linkend="void"><returnvalue>void</returnvalue></link>                regress_test_struct_fixed_array_frob    (<parameter><link linkend="RegressTestStructFixedArray"><type>RegressTestStructFixedArray*</type></link> teststructfixedarray</parameter>);
        </programlisting>
        <para/>
      </refsect2>
    </refsect1>
  </chapter>
  <chapter xml:id="ch_RegressTestSubObj">
    <refentry id="RegressTestSubObj"/>
    <title>RegressTestSubObj</title>
    <refsynopsisdiv id="RegressTestSubObj.synopsis" role="synopsis">
      <title role="synopsis.title">Synopsis</title>
      <synopsis>
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="instance_method-details">regress_test_sub_obj_instance_method</link>    (<parameter><link linkend="RegressTestSubObj"><type>RegressTestSubObj*</type></link> testsubobj</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="unset_bare-details">regress_test_sub_obj_unset_bare</link>         (<parameter><link linkend="RegressTestSubObj"><type>RegressTestSubObj*</type></link> testsubobj</parameter>);
      </synopsis>
    </refsynopsisdiv>
    <refsect1 id="RegressTestSubObj.object-hierarchy" role="object_hierarchy">
      <title role="object_hierarchy.title">Object Hierarchy</title>
      <synopsis>
  GObject
   +----RegressTestObj
         +----RegressTestSubObj      </synopsis>
    </refsect1>
    <refsect1 id="RegressTestSubObj-details" role="details">
      <title role="details.title">Details</title>
      <refsect2 id="regress_test_sub_obj_instance_method" role="struct">
        <title>regress_test_sub_obj_instance_method ()</title>
        <indexterm zone="instance_method">
          <primary>instance_method</primary>
        </indexterm>
        <programlisting>
<link linkend="int"><returnvalue>int</returnvalue></link>                 regress_test_sub_obj_instance_method    (<parameter><link linkend="RegressTestSubObj"><type>RegressTestSubObj*</type></link> testsubobj</parameter>);
        </programlisting>
        <para/>
      </refsect2>
      <refsect2 id="regress_test_sub_obj_unset_bare" role="struct">
        <title>regress_test_sub_obj_unset_bare ()</title>
        <indexterm zone="unset_bare">
          <primary>unset_bare</primary>
        </indexterm>
        <programlisting>
<link linkend="void"><returnvalue>void</returnvalue></link>                regress_test_sub_obj_unset_bare         (<parameter><link linkend="RegressTestSubObj"><type>RegressTestSubObj*</type></link> testsubobj</parameter>);
        </programlisting>
        <para/>
      </refsect2>
    </refsect1>
  </chapter>
  <chapter xml:id="ch_RegressTestSubObjClass">
    <refentry id="RegressTestSubObjClass"/>
    <title>RegressTestSubObjClass</title>
    <refsynopsisdiv id="RegressTestSubObjClass.synopsis" role="synopsis">
      <title role="synopsis.title">Synopsis</title>
      <synopsis>
      </synopsis>
    </refsynopsisdiv>
  </chapter>
  <chapter xml:id="ch_RegressTestWi8021x">
    <refentry id="RegressTestWi8021x"/>
    <title>RegressTestWi8021x</title>
    <refsynopsisdiv id="RegressTestWi8021x.synopsis" role="synopsis">
      <title role="synopsis.title">Synopsis</title>
      <synopsis>
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="get_testbool-details">regress_test_wi_802_1x_get_testbool</link>     (<parameter><link linkend="RegressTestWi8021x"><type>RegressTestWi8021x*</type></link> testwi8021x</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="set_testbool-details">regress_test_wi_802_1x_set_testbool</link>     (<parameter><link linkend="RegressTestWi8021x"><type>RegressTestWi8021x*</type></link> testwi8021x, </parameter>
                                                             <parameter><link linkend="gboolean"><type>gboolean</type></link> v</parameter>);
      </synopsis>
    </refsynopsisdiv>
    <refsect1 id="RegressTestWi8021x.object-hierarchy" role="object_hierarchy">
      <title role="object_hierarchy.title">Object Hierarchy</title>
      <synopsis>
  GObject
   +----RegressTestWi8021x      </synopsis>
    </refsect1>
    <refsect1 id="RegressTestWi8021x.properties" role="properties">
      <title role="properties.title">Properties</title>
      <synopsis>
  "testbool"                 gboolean              : Read / Write
      </synopsis>
    </refsect1>
    <refsect1 id="RegressTestWi8021x-details" role="details">
      <title role="details.title">Details</title>
      <refsect2 id="regress_test_wi_802_1x_get_testbool" role="struct">
        <title>regress_test_wi_802_1x_get_testbool ()</title>
        <indexterm zone="get_testbool">
          <primary>get_testbool</primary>
        </indexterm>
        <programlisting>
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            regress_test_wi_802_1x_get_testbool     (<parameter><link linkend="RegressTestWi8021x"><type>RegressTestWi8021x*</type></link> testwi8021x</parameter>);
        </programlisting>
        <para/>
      </refsect2>
      <refsect2 id="regress_test_wi_802_1x_set_testbool" role="struct">
        <title>regress_test_wi_802_1x_set_testbool ()</title>
        <indexterm zone="set_testbool">
          <primary>set_testbool</primary>
        </indexterm>
        <programlisting>
<link linkend="void"><returnvalue>void</returnvalue></link>                regress_test_wi_802_1x_set_testbool     (<parameter><link linkend="RegressTestWi8021x"><type>RegressTestWi8021x*</type></link> testwi8021x, </parameter>
                                                             <parameter><link linkend="gboolean"><type>gboolean</type></link> v</parameter>);
        </programlisting>
        <para/>
      </refsect2>
    </refsect1>
    <refsect1 id="RegressTestWi8021x.property-details" role="property_details">
      <title role="property_details.title">Property Details</title>
      Not implemented yet
    </refsect1>
  </chapter>
  <chapter xml:id="ch_RegressTestWi8021xClass">
    <refentry id="RegressTestWi8021xClass"/>
    <title>RegressTestWi8021xClass</title>
    <refsynopsisdiv id="RegressTestWi8021xClass.synopsis" role="synopsis">
      <title role="synopsis.title">Synopsis</title>
      <synopsis>
      </synopsis>
    </refsynopsisdiv>
  </chapter>
</book>
