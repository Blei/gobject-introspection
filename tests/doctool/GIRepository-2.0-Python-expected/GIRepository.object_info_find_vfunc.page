<?xml version="1.0"?>

<page id="GIRepository.object_info_find_vfunc"
      type="topic"
      style="function"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/experimental/ui/">
  <info>
    <link type="guide" xref="index" group="function"/>
    <api:function>
      <api:returns>
        <api:type>GIRepository.VFuncInfo</api:type>
      </api:returns>
      <api:name>g_object_info_find_vfunc</api:name>
      <api:arg>
        <api:type>GIRepository.ObjectInfo</api:type>
        <api:name>info</api:name>
      </api:arg>
      <api:arg>
        <api:type>utf8</api:type>
        <api:name>name</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>object_info_find_vfunc</title>
<synopsis><code mime="text/x-python">
@accepts(GIRepository.ObjectInfo, utf8)
@returns(GIRepository.VFuncInfo)
def object_info_find_vfunc(info, name)
</code></synopsis>
<p>Locate a virtual function slot with name @name. Note that the namespace
for virtuals is distinct from that of methods; there may or may not be
a concrete method associated for a virtual. If there is one, it may
be retrieved using g_vfunc_info_get_invoker(), otherwise %NULL will be
returned.
See the documentation for g_vfunc_info_get_invoker() for more
information on invoking virtuals.</p><p>g_base_info_unref() when done.</p>

<table>
<tr>
<td><p>info :</p></td>
<td><p>a <link xref="GIObjectInfo">GIObjectInfo</link></p></td>
</tr>
<tr>
<td><p>name :</p></td>
<td><p>The name of a virtual function to find.</p></td>
</tr>
<tr>
<td><p>Returns :</p></td>
<td><p>the <link xref="GIVFuncInfo">GIVFuncInfo</link>, or %NULL. Free it with</p></td>
</tr>
</table>
</page>
