#!/usr/bin/env python
import commands
import optparse
import sys

sys.path.insert(0, '.')

from giscanner.gidlwriter import GIDLWriter
from giscanner.gobjecttreebuilder import GObjectTreeBuilder
from giscanner.sourcescanner import SourceScanner
from giscanner.treebuilder import TreeBuilder

def main(args):
    parser = optparse.OptionParser('%prog [options] sources')
    parser.add_option("-i", "--include",
                      action="append", dest="includes", default=[],
                      help="include types for other gidls")
    parser.add_option("-l", "--library",
                      action="store", dest="library",
                      help="library of this unit")
    parser.add_option("-n", "--namespace",
                      action="store", dest="namespace",
                      help="namespace of this unit")
    parser.add_option("-o", "--output",
                      action="store", dest="output",
                      help="output to writeout, defaults to stdout")
    parser.add_option("", "--pkg",
                      action="append", dest="packages", default=[],
                      help="pkg-config packages to get cflags from")
    parser.add_option("-v", "--verbose",
                      action="store_true", dest="verbose",
                      help="be verbose")

    group = optparse.OptionGroup(parser, "Preprocessor options")
    group.add_option("-I", help="Pre-processor include file",
                     action="append", dest="cpp_includes",
                     default=[])
    group.add_option("-D", help="Pre-processor define",
                     action="append", dest="cpp_defines",
                     default=[])
    group.add_option("-U", help="Pre-processor undefine",
                     action="append", dest="cpp_undefines",
                     default=[])
    group.add_option("-p", dest="", help="Ignored")
    parser.add_option_group(group)

    (options, args) = parser.parse_args(args)

    if not args:
        print 'ERROR: Needs at least one filename.'
        return 0

    for package in options.packages:
        output = commands.getoutput('pkg-config --cflags %s' % (package,))
        pkg_options, unused = parser.parse_args(output.split())
        options.cpp_includes.extend(pkg_options.cpp_includes)
        options.cpp_defines.extend(pkg_options.cpp_defines)
        options.cpp_undefines.extend(pkg_options.cpp_undefines)

    ss = SourceScanner()
    ss.set_cpp_options(options.cpp_includes,
                       options.cpp_defines,
                       options.cpp_undefines)
    filenames = []
    for arg in args:
        if (arg.endswith('.c') or
            arg.endswith('.h')):
            filenames.append(arg)

    for filename in filenames:
        ss.parse_file(filename)
    ss.parse_macros()

    builder = GObjectTreeBuilder(options.namespace)
    builder.load_library(options.library)
    for include in options.includes:
        builder.register_include(include)
    builder.parse(TreeBuilder(ss).get_nodes())

    writer = GIDLWriter(options.namespace, builder.get_nodes())

    data = writer.get_xml()
    if options.output:
        fd = open(options.output, "w")
        fd.write(data)
    else:
        print data

sys.exit(main(sys.argv))
