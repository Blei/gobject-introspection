#!/usr/bin/env python
import os
import subprocess
import sys

sys.path.insert(0, '.')

import giscanner

class Symbol(object):
    def __init__(self, symbol):
        self.symbol = symbol
        self.nodes = []

    def __repr__(self):
        return '%s(%s, %s)>' % (self.__class__.__name__,
                                self.symbol.ident,
                                self.nodes)

class Function(Symbol):
    pass

class Struct(Symbol):
    pass

class Typedef(Symbol):
    pass

class Generator(object):
    def __init__(self):
        self._scanner = giscanner.SourceScanner()
        self._filenames = []
        self._cpp_options = None

    # Public API

    def set_cpp_options(self, cpp_options):
        self._cpp_options = cpp_options

    def parse_file(self, filename):
        self._parse_one(filename)
        self._filenames.append(filename)

    def parse_macros(self):
        self._scanner.set_macro_scan(True)
        for filename in self._filenames:
            self._parse_one(filename)
        self._scanner.set_macro_scan(False)

    def get_symbols(self):
        for symbol in self._scanner.get_symbols():
            yield symbol

    def dump(self):
        print '-'*30
        for symbol in self._scanner.get_symbols():
            print symbol.ident, symbol.base_type.name, symbol.type

    # Private

    def _parse_one(self, filename):
        if filename.endswith('.c'):
            # FIXME lex only
            return

        filename = os.path.abspath(filename)
        proc = self._preprocess(filename)
        fd = proc.stdout.fileno()
        if proc is None:
            return

        self._scanner.parse_file(fd, filename)

    def _preprocess(self, filename):
        cpp_args = [
            'cpp',
            '-C',
            '-U__GNUC__',
            '-I.',
            ]
        cpp_args += self._cpp_options
        proc = subprocess.Popen(
            cpp_args,
            bufsize=4096,
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            )
        proc.stdin.write('#include <%s>\n' % (filename,))
        proc.stdin.close()
        return proc


class TreeBuilder(object):
    def __init__(self, generator):
        self.generator = generator
        self.nodes = []

        self._traverse()

    def _traverse(self):
        for symbol in self.generator.get_symbols():
            node = self._traverse_one(symbol)
            if node is not None:
                self.nodes.append(node)

    def _traverse_one(self, symbol):
        if symbol.type == giscanner.CSYMBOL_TYPE_FUNCTION:
            return Function(symbol)
        elif symbol.type == giscanner.CSYMBOL_TYPE_TYPEDEF:
            return Typedef(symbol)
        elif symbol.type == giscanner.CSYMBOL_TYPE_STRUCT:
            return Struct(symbol)
        else:
            print 'unhandled', symbol.type

def main(args):
    if len(args) == 1:
        print 'ERROR: Needs at least one filename.'
        return 0

    filenames = []
    cpp_options = []

    gen = Generator()
    for arg in args[1:]:
        if (arg.endswith('.c') or
            arg.endswith('.h')):
            filenames.append(arg)
        elif arg.startswith('-') and len(arg) >= 2:
            if arg[1] in ['I', 'U', 'D']:
                cpp_options.append(arg)
        else:
            print 'Unhandled argument:', arg
    gen.set_cpp_options(cpp_options)

    for filename in filenames:
        gen.parse_file(filename)
    gen.parse_macros()

    builder = TreeBuilder(gen)
    print builder.nodes

sys.exit(main(sys.argv))
