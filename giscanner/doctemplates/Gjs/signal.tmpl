<%inherit file="/base.tmpl"/>
<%block name="info">
    <link type="guide" xref="${namespace.name}.${node.parent.name}" group="signal"/>
    <title type="link" role="topic">${node.name}</title>
</%block>
<%block name="synopsis">
<synopsis><code mime="text/x-python">
function callback(${formatter.to_underscores(node.parent.name).lower()}, \
% for arg in formatter.get_parameters(node):
${arg.argname}:${formatter.format_type(arg.type)}, \
% endfor
user_param1, ...):${formatter.format_type(node.retval.type)};
</code></synopsis>
</%block>
<%block name="details">
<terms>
<item>
<title><code>${formatter.to_underscores(node.parent.name).lower()}</code></title>
<p>instance of ${namespace.name}.${node.parent.name} that is emitting the signal</p>
</item>
% for arg in formatter.get_parameters(node):
<item>
<title><code>${arg.argname}</code></title>
${formatter.format(node, arg.doc)}
</item>
% endfor
<item>
<title><code>user_param1</code></title>
<p>first user parameter (if any) specified with the connect() method</p>
</item>
<item>
<title><code>...</code></title>
<p>additional user parameters (if any)</p>
</item>
% if node.retval and \
     node.retval.type.ctype != 'void' and \
     node.retval.type.ctype is not None:
<item>
<title><code>Returns</code></title>
<p>${node.retval.type.ctype} ${formatter.format(node, node.retval.doc)}</p>
</item>
% endif
</terms>
</%block>

