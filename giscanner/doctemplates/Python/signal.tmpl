<%inherit file="/base.tmpl"/>
<%block name="info">
    <link type="guide" xref="${namespace.name}.${node.parent.name}" group="signal"/>
    <title type="link" role="topic">${node.name}</title>
</%block>
<%block name="synopsis">
<synopsis><code mime="text/x-python">
def callback(${formatter.to_underscores(node.parent.name).lower()}, \
% for arg, ix in zip(node.parameters, range(len(node.parameters))):
${arg.argname}, \
% endfor
user_param1, ...)
</code></synopsis>
</%block>
<%block name="details">
<dl>
<dt><p>${formatter.to_underscores(node.parent.name).lower()} :</p></dt>
<dd><p>instance of ${namespace.name}.${node.parent.name} that is emitting the signal</p></dd>
% for arg, ix in zip(node.parameters, range(len(node.parameters))):
<dt><p>${arg.argname} :</p></dt>
<dd>${formatter.format(node, arg.doc)}</dd>
% endfor
<dt><p>user_param1 :</p></dt>
<dd><p>first user parameter (if any) specified with the connect() method</p></dd>
<dt><p>... :</p></dt>
<dd><p>additional user parameters (if any)</p></dd>
% if node.retval and \
     node.retval.type.ctype != 'void' and \
     node.retval.type.ctype is not None:
<dt><p>Returns :</p></dt>
<dd>${node.retval.type.ctype} ${formatter.format(node, node.retval.doc)}</dd>
% endif
</dl>
</%block>

